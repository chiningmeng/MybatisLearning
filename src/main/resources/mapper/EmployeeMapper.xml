<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.EmployeeMapper">
    <!--namespace:
    映射文件中的namespace是用于绑定Dao接口的，即面向接口编程。
    当你的namespace绑定接口后，你可以不用写接口实现类，
    mybatis会通过该绑定自动帮你找到对应要执行的SQL语句
    -->
    <!--id:  接口中的方法与映射文件中的SQL语句的ID一一对应
        resultType: 返回类型
        #{id}  : 从传递过来的参数中取id值


        public Employee getEmpById(Integer id);
    -->
    <select id="getEmpByIdAndLastName" resultType="employee">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    <select id="getEmpByMap" resultType="employee">
        select * from ${tableName} where id=#{id} and last_name=#{lastName}
    </select>
    <!--parameterType :参数类型，可以省略
        MySQL支持自增主键，自增主键值的获取，mybatis也是利用statement.getGeneratedKeys()
        useGeneratedKeys="true",使用自增主键值策略
        keyProperty, 指定对应的主键属性，也就是mybatis获取到主键 值以后，将这个值封装给JavaBean的哪个属性
    -->
    <insert id="addEmployee" parameterType="bean.Employee"
        useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,gender,email)
        value(#{lastName},#{gender},#{email})
    </insert>

    <update id="updateEmployee">
        update tbl_employee
            set last_name=#{lastName},email=#{email},gender=#{gender}
        where id = #{id}
    </update>

    <delete id="deleteEmployee">
        delete from tbl_employee where id=#{id}
    </delete>

</mapper>